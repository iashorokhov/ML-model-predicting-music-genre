{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[{"file_id":"128A78Sq55uZMXHsTW3Nzm-5g67GIgWyQ","timestamp":1700037609034}],"toc_visible":true},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6911597,"sourceType":"datasetVersion","datasetId":3969340},{"sourceId":150133999,"sourceType":"kernelVersion"}],"dockerImageVersionId":30587,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"id\":\"Jnu2gwveInfE\",\"execution\":{\"iopub.status.busy\":\"2023-12-08T12:36:06.093704Z\",\"iopub.execute_input\":\"2023-12-08T12:36:06.094181Z\",\"iopub.status.idle\":\"2023-12-08T12:36:07.269841Z\",\"shell.execute_reply.started\":\"2023-12-08T12:36:06.094133Z\",\"shell.execute_reply\":\"2023-12-08T12:36:07.268729Z\"}}\nimport pandas as pd\nfrom sklearn.model_selection import (\n    train_test_split,\n    GridSearchCV\n)\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.compose import ColumnTransformer\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import (\n    StandardScaler,\n    OneHotEncoder\n)\n\nclass MusicGenreClassifier:\n    def __init__(self):\n        self.le = LabelEncoder()\n        self.preprocessor = ColumnTransformer(\n            transformers=[\n                ('num', StandardScaler(), ['acousticness', 'danceability', 'duration_ms', 'energy',\n                                           'instrumentalness', 'liveness', 'loudness', 'speechiness',\n                                           'tempo', 'valence']),\n                ('cat', OneHotEncoder(sparse_output=False), ['key', 'mode'])\n            ]\n        )\n        self.pipeline = Pipeline([\n            ('classifier', RandomForestClassifier(random_state=42))\n        ])\n        self.parameters = {\n            'classifier__n_estimators': [10, 30, 50],\n            'classifier__max_depth': [10, 20]\n        }\n        self.gridsearch = GridSearchCV(self.pipeline, self.parameters, cv=5)\n        self.smote = SMOTE()\n        \n    def fit(self, X, y):\n        y_encoded = self.le.fit_transform(y)\n        X_processed = self.preprocessor.fit_transform(X)\n        X_resampled, y_resampled = self.smote.fit_resample(X_processed, y_encoded)\n        self.gridsearch.fit(X_resampled, y_resampled)\n        \n    def predict(self, X):\n        X_processed = self.preprocessor.transform(X)\n        return self.gridsearch.predict(X_processed)\n    \n    def predict_and_decode(self, X):\n        y_pred_encoded = self.predict(X)\n        return self.le.inverse_transform(y_pred_encoded)\n\n# Загрузка данных\ndata = pd.read_csv('kaggle_music_genre_train.csv')\ndata_test = pd.read_csv('kaggle_music_genre_test.csv')\n\n# Удаляем пропуски и лишние столбцы, преобразуем типы столбцов\ndata = (data.dropna()\n            .drop(['obtained_date', 'track_name'], axis=1)\n            .astype({'key': 'category', 'mode': 'category'}))\n\ndata_test = (data_test.dropna()\n                     .drop(['obtained_date', 'track_name'], axis=1)\n                     .astype({'key': 'category', 'mode': 'category', 'instance_id': 'float64'}))\n\n# Выделение признаков и целевого признака\nX = data.drop('music_genre', axis=1)\ny = data['music_genre']\n\n# Разделение данных на тренировочную и тестовую выборки\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Создание экземпляра классификатора\nclassifier = MusicGenreClassifier()\n\n# Обучение модели\nclassifier.fit(X_train, y_train)\n\n# Прогнозы на тестовой выборке\ny_pred = classifier.predict(X_test)\n\n# Предсказания для новых данных\ny_pred_new = classifier.predict_and_decode(data_test)\n\n# Оформляем предсказания в датафрейм\npredictions = pd.DataFrame({'instance_id': data_test['instance_id'], 'music_genre': y_pred_new})\n\n# Сохраняем предсказания в файл\npredictions.to_csv('predictions.csv', index=False)","metadata":{"_uuid":"c3536c3c-27d5-41d3-80f3-38b22f898a5c","_cell_guid":"e0dad38e-555e-4afa-ab79-ac2d5fbad877","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}